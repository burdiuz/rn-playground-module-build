module.exports = () => ({
  'lodash/fp/add': (pkg) => pkg.$add,
  'lodash/fp/after': (pkg) => pkg.$after,
  'lodash/fp/all': (pkg) => pkg.$all,
  'lodash/fp/allPass': (pkg) => pkg.$allPass,
  'lodash/fp/always': (pkg) => pkg.$always,
  'lodash/fp/any': (pkg) => pkg.$any,
  'lodash/fp/anyPass': (pkg) => pkg.$anyPass,
  'lodash/fp/apply': (pkg) => pkg.$apply,
  'lodash/fp/array': (pkg) => pkg.$array,
  'lodash/fp/ary': (pkg) => pkg.$ary,
  'lodash/fp/assign': (pkg) => pkg.$assign,
  'lodash/fp/assignAll': (pkg) => pkg.$assignAll,
  'lodash/fp/assignAllWith': (pkg) => pkg.$assignAllWith,
  'lodash/fp/assignIn': (pkg) => pkg.$assignIn,
  'lodash/fp/assignInAll': (pkg) => pkg.$assignInAll,
  'lodash/fp/assignInAllWith': (pkg) => pkg.$assignInAllWith,
  'lodash/fp/assignInWith': (pkg) => pkg.$assignInWith,
  'lodash/fp/assignWith': (pkg) => pkg.$assignWith,
  'lodash/fp/assoc': (pkg) => pkg.$assoc,
  'lodash/fp/assocPath': (pkg) => pkg.$assocPath,
  'lodash/fp/at': (pkg) => pkg.$at,
  'lodash/fp/attempt': (pkg) => pkg.$attempt,
  'lodash/fp/before': (pkg) => pkg.$before,
  'lodash/fp/bind': (pkg) => pkg.$bind,
  'lodash/fp/bindAll': (pkg) => pkg.$bindAll,
  'lodash/fp/bindKey': (pkg) => pkg.$bindKey,
  'lodash/fp/camelCase': (pkg) => pkg.$camelCase,
  'lodash/fp/capitalize': (pkg) => pkg.$capitalize,
  'lodash/fp/castArray': (pkg) => pkg.$castArray,
  'lodash/fp/ceil': (pkg) => pkg.$ceil,
  'lodash/fp/chain': (pkg) => pkg.$chain,
  'lodash/fp/chunk': (pkg) => pkg.$chunk,
  'lodash/fp/clamp': (pkg) => pkg.$clamp,
  'lodash/fp/clone': (pkg) => pkg.$clone,
  'lodash/fp/cloneDeep': (pkg) => pkg.$cloneDeep,
  'lodash/fp/cloneDeepWith': (pkg) => pkg.$cloneDeepWith,
  'lodash/fp/cloneWith': (pkg) => pkg.$cloneWith,
  'lodash/fp/collection': (pkg) => pkg.$collection,
  'lodash/fp/commit': (pkg) => pkg.$commit,
  'lodash/fp/compact': (pkg) => pkg.$compact,
  'lodash/fp/complement': (pkg) => pkg.$complement,
  'lodash/fp/compose': (pkg) => pkg.$compose,
  'lodash/fp/concat': (pkg) => pkg.$concat,
  'lodash/fp/cond': (pkg) => pkg.$cond,
  'lodash/fp/conforms': (pkg) => pkg.$conforms,
  'lodash/fp/conformsTo': (pkg) => pkg.$conformsTo,
  'lodash/fp/constant': (pkg) => pkg.$constant,
  'lodash/fp/contains': (pkg) => pkg.$contains,
  'lodash/fp/convert': (pkg) => pkg.$convert,
  'lodash/fp/countBy': (pkg) => pkg.$countBy,
  'lodash/fp/create': (pkg) => pkg.$create,
  'lodash/fp/curry': (pkg) => pkg.$curry,
  'lodash/fp/curryN': (pkg) => pkg.$curryN,
  'lodash/fp/curryRight': (pkg) => pkg.$curryRight,
  'lodash/fp/curryRightN': (pkg) => pkg.$curryRightN,
  'lodash/fp/date': (pkg) => pkg.$date,
  'lodash/fp/debounce': (pkg) => pkg.$debounce,
  'lodash/fp/deburr': (pkg) => pkg.$deburr,
  'lodash/fp/defaults': (pkg) => pkg.$defaults,
  'lodash/fp/defaultsAll': (pkg) => pkg.$defaultsAll,
  'lodash/fp/defaultsDeep': (pkg) => pkg.$defaultsDeep,
  'lodash/fp/defaultsDeepAll': (pkg) => pkg.$defaultsDeepAll,
  'lodash/fp/defaultTo': (pkg) => pkg.$defaultTo,
  'lodash/fp/defer': (pkg) => pkg.$defer,
  'lodash/fp/delay': (pkg) => pkg.$delay,
  'lodash/fp/difference': (pkg) => pkg.$difference,
  'lodash/fp/differenceBy': (pkg) => pkg.$differenceBy,
  'lodash/fp/differenceWith': (pkg) => pkg.$differenceWith,
  'lodash/fp/dissoc': (pkg) => pkg.$dissoc,
  'lodash/fp/dissocPath': (pkg) => pkg.$dissocPath,
  'lodash/fp/divide': (pkg) => pkg.$divide,
  'lodash/fp/drop': (pkg) => pkg.$drop,
  'lodash/fp/dropLast': (pkg) => pkg.$dropLast,
  'lodash/fp/dropLastWhile': (pkg) => pkg.$dropLastWhile,
  'lodash/fp/dropRight': (pkg) => pkg.$dropRight,
  'lodash/fp/dropRightWhile': (pkg) => pkg.$dropRightWhile,
  'lodash/fp/dropWhile': (pkg) => pkg.$dropWhile,
  'lodash/fp/each': (pkg) => pkg.$each,
  'lodash/fp/eachRight': (pkg) => pkg.$eachRight,
  'lodash/fp/endsWith': (pkg) => pkg.$endsWith,
  'lodash/fp/entries': (pkg) => pkg.$entries,
  'lodash/fp/entriesIn': (pkg) => pkg.$entriesIn,
  'lodash/fp/eq': (pkg) => pkg.$eq,
  'lodash/fp/equals': (pkg) => pkg.$equals,
  'lodash/fp/escape': (pkg) => pkg.$escape,
  'lodash/fp/escapeRegExp': (pkg) => pkg.$escapeRegExp,
  'lodash/fp/every': (pkg) => pkg.$every,
  'lodash/fp/extend': (pkg) => pkg.$extend,
  'lodash/fp/extendAll': (pkg) => pkg.$extendAll,
  'lodash/fp/extendAllWith': (pkg) => pkg.$extendAllWith,
  'lodash/fp/extendWith': (pkg) => pkg.$extendWith,
  'lodash/fp/F': (pkg) => pkg.$F,
  'lodash/fp/fill': (pkg) => pkg.$fill,
  'lodash/fp/filter': (pkg) => pkg.$filter,
  'lodash/fp/find': (pkg) => pkg.$find,
  'lodash/fp/findFrom': (pkg) => pkg.$findFrom,
  'lodash/fp/findIndex': (pkg) => pkg.$findIndex,
  'lodash/fp/findIndexFrom': (pkg) => pkg.$findIndexFrom,
  'lodash/fp/findKey': (pkg) => pkg.$findKey,
  'lodash/fp/findLast': (pkg) => pkg.$findLast,
  'lodash/fp/findLastFrom': (pkg) => pkg.$findLastFrom,
  'lodash/fp/findLastIndex': (pkg) => pkg.$findLastIndex,
  'lodash/fp/findLastIndexFrom': (pkg) => pkg.$findLastIndexFrom,
  'lodash/fp/findLastKey': (pkg) => pkg.$findLastKey,
  'lodash/fp/first': (pkg) => pkg.$first,
  'lodash/fp/flatMap': (pkg) => pkg.$flatMap,
  'lodash/fp/flatMapDeep': (pkg) => pkg.$flatMapDeep,
  'lodash/fp/flatMapDepth': (pkg) => pkg.$flatMapDepth,
  'lodash/fp/flatten': (pkg) => pkg.$flatten,
  'lodash/fp/flattenDeep': (pkg) => pkg.$flattenDeep,
  'lodash/fp/flattenDepth': (pkg) => pkg.$flattenDepth,
  'lodash/fp/flip': (pkg) => pkg.$flip,
  'lodash/fp/floor': (pkg) => pkg.$floor,
  'lodash/fp/flow': (pkg) => pkg.$flow,
  'lodash/fp/flowRight': (pkg) => pkg.$flowRight,
  'lodash/fp/forEach': (pkg) => pkg.$forEach,
  'lodash/fp/forEachRight': (pkg) => pkg.$forEachRight,
  'lodash/fp/forIn': (pkg) => pkg.$forIn,
  'lodash/fp/forInRight': (pkg) => pkg.$forInRight,
  'lodash/fp/forOwn': (pkg) => pkg.$forOwn,
  'lodash/fp/forOwnRight': (pkg) => pkg.$forOwnRight,
  'lodash/fp/fromPairs': (pkg) => pkg.$fromPairs,
  'lodash/fp/function': (pkg) => pkg.$function,
  'lodash/fp/functions': (pkg) => pkg.$functions,
  'lodash/fp/functionsIn': (pkg) => pkg.$functionsIn,
  'lodash/fp/get': (pkg) => pkg.$get,
  'lodash/fp/getOr': (pkg) => pkg.$getOr,
  'lodash/fp/groupBy': (pkg) => pkg.$groupBy,
  'lodash/fp/gt': (pkg) => pkg.$gt,
  'lodash/fp/gte': (pkg) => pkg.$gte,
  'lodash/fp/has': (pkg) => pkg.$has,
  'lodash/fp/hasIn': (pkg) => pkg.$hasIn,
  'lodash/fp/head': (pkg) => pkg.$head,
  'lodash/fp/identical': (pkg) => pkg.$identical,
  'lodash/fp/identity': (pkg) => pkg.$identity,
  'lodash/fp/includes': (pkg) => pkg.$includes,
  'lodash/fp/includesFrom': (pkg) => pkg.$includesFrom,
  'lodash/fp/indexBy': (pkg) => pkg.$indexBy,
  'lodash/fp/indexOf': (pkg) => pkg.$indexOf,
  'lodash/fp/indexOfFrom': (pkg) => pkg.$indexOfFrom,
  'lodash/fp/init': (pkg) => pkg.$init,
  'lodash/fp/initial': (pkg) => pkg.$initial,
  'lodash/fp/inRange': (pkg) => pkg.$inRange,
  'lodash/fp/intersection': (pkg) => pkg.$intersection,
  'lodash/fp/intersectionBy': (pkg) => pkg.$intersectionBy,
  'lodash/fp/intersectionWith': (pkg) => pkg.$intersectionWith,
  'lodash/fp/invert': (pkg) => pkg.$invert,
  'lodash/fp/invertBy': (pkg) => pkg.$invertBy,
  'lodash/fp/invertObj': (pkg) => pkg.$invertObj,
  'lodash/fp/invoke': (pkg) => pkg.$invoke,
  'lodash/fp/invokeArgs': (pkg) => pkg.$invokeArgs,
  'lodash/fp/invokeArgsMap': (pkg) => pkg.$invokeArgsMap,
  'lodash/fp/invokeMap': (pkg) => pkg.$invokeMap,
  'lodash/fp/isArguments': (pkg) => pkg.$isArguments,
  'lodash/fp/isArray': (pkg) => pkg.$isArray,
  'lodash/fp/isArrayBuffer': (pkg) => pkg.$isArrayBuffer,
  'lodash/fp/isArrayLike': (pkg) => pkg.$isArrayLike,
  'lodash/fp/isArrayLikeObject': (pkg) => pkg.$isArrayLikeObject,
  'lodash/fp/isBoolean': (pkg) => pkg.$isBoolean,
  'lodash/fp/isBuffer': (pkg) => pkg.$isBuffer,
  'lodash/fp/isDate': (pkg) => pkg.$isDate,
  'lodash/fp/isElement': (pkg) => pkg.$isElement,
  'lodash/fp/isEmpty': (pkg) => pkg.$isEmpty,
  'lodash/fp/isEqual': (pkg) => pkg.$isEqual,
  'lodash/fp/isEqualWith': (pkg) => pkg.$isEqualWith,
  'lodash/fp/isError': (pkg) => pkg.$isError,
  'lodash/fp/isFinite': (pkg) => pkg.$isFinite,
  'lodash/fp/isFunction': (pkg) => pkg.$isFunction,
  'lodash/fp/isInteger': (pkg) => pkg.$isInteger,
  'lodash/fp/isLength': (pkg) => pkg.$isLength,
  'lodash/fp/isMap': (pkg) => pkg.$isMap,
  'lodash/fp/isMatch': (pkg) => pkg.$isMatch,
  'lodash/fp/isMatchWith': (pkg) => pkg.$isMatchWith,
  'lodash/fp/isNaN': (pkg) => pkg.$isNaN,
  'lodash/fp/isNative': (pkg) => pkg.$isNative,
  'lodash/fp/isNil': (pkg) => pkg.$isNil,
  'lodash/fp/isNull': (pkg) => pkg.$isNull,
  'lodash/fp/isNumber': (pkg) => pkg.$isNumber,
  'lodash/fp/isObject': (pkg) => pkg.$isObject,
  'lodash/fp/isObjectLike': (pkg) => pkg.$isObjectLike,
  'lodash/fp/isPlainObject': (pkg) => pkg.$isPlainObject,
  'lodash/fp/isRegExp': (pkg) => pkg.$isRegExp,
  'lodash/fp/isSafeInteger': (pkg) => pkg.$isSafeInteger,
  'lodash/fp/isSet': (pkg) => pkg.$isSet,
  'lodash/fp/isString': (pkg) => pkg.$isString,
  'lodash/fp/isSymbol': (pkg) => pkg.$isSymbol,
  'lodash/fp/isTypedArray': (pkg) => pkg.$isTypedArray,
  'lodash/fp/isUndefined': (pkg) => pkg.$isUndefined,
  'lodash/fp/isWeakMap': (pkg) => pkg.$isWeakMap,
  'lodash/fp/isWeakSet': (pkg) => pkg.$isWeakSet,
  'lodash/fp/iteratee': (pkg) => pkg.$iteratee,
  'lodash/fp/join': (pkg) => pkg.$join,
  'lodash/fp/juxt': (pkg) => pkg.$juxt,
  'lodash/fp/kebabCase': (pkg) => pkg.$kebabCase,
  'lodash/fp/keyBy': (pkg) => pkg.$keyBy,
  'lodash/fp/keys': (pkg) => pkg.$keys,
  'lodash/fp/keysIn': (pkg) => pkg.$keysIn,
  'lodash/fp/lang': (pkg) => pkg.$lang,
  'lodash/fp/last': (pkg) => pkg.$last,
  'lodash/fp/lastIndexOf': (pkg) => pkg.$lastIndexOf,
  'lodash/fp/lastIndexOfFrom': (pkg) => pkg.$lastIndexOfFrom,
  'lodash/fp/lowerCase': (pkg) => pkg.$lowerCase,
  'lodash/fp/lowerFirst': (pkg) => pkg.$lowerFirst,
  'lodash/fp/lt': (pkg) => pkg.$lt,
  'lodash/fp/lte': (pkg) => pkg.$lte,
  'lodash/fp/map': (pkg) => pkg.$map,
  'lodash/fp/mapKeys': (pkg) => pkg.$mapKeys,
  'lodash/fp/mapValues': (pkg) => pkg.$mapValues,
  'lodash/fp/matches': (pkg) => pkg.$matches,
  'lodash/fp/matchesProperty': (pkg) => pkg.$matchesProperty,
  'lodash/fp/math': (pkg) => pkg.$math,
  'lodash/fp/max': (pkg) => pkg.$max,
  'lodash/fp/maxBy': (pkg) => pkg.$maxBy,
  'lodash/fp/mean': (pkg) => pkg.$mean,
  'lodash/fp/meanBy': (pkg) => pkg.$meanBy,
  'lodash/fp/memoize': (pkg) => pkg.$memoize,
  'lodash/fp/merge': (pkg) => pkg.$merge,
  'lodash/fp/mergeAll': (pkg) => pkg.$mergeAll,
  'lodash/fp/mergeAllWith': (pkg) => pkg.$mergeAllWith,
  'lodash/fp/mergeWith': (pkg) => pkg.$mergeWith,
  'lodash/fp/method': (pkg) => pkg.$method,
  'lodash/fp/methodOf': (pkg) => pkg.$methodOf,
  'lodash/fp/min': (pkg) => pkg.$min,
  'lodash/fp/minBy': (pkg) => pkg.$minBy,
  'lodash/fp/mixin': (pkg) => pkg.$mixin,
  'lodash/fp/multiply': (pkg) => pkg.$multiply,
  'lodash/fp/nAry': (pkg) => pkg.$nAry,
  'lodash/fp/negate': (pkg) => pkg.$negate,
  'lodash/fp/next': (pkg) => pkg.$next,
  'lodash/fp/noop': (pkg) => pkg.$noop,
  'lodash/fp/now': (pkg) => pkg.$now,
  'lodash/fp/nth': (pkg) => pkg.$nth,
  'lodash/fp/nthArg': (pkg) => pkg.$nthArg,
  'lodash/fp/number': (pkg) => pkg.$number,
  'lodash/fp/object': (pkg) => pkg.$object,
  'lodash/fp/omit': (pkg) => pkg.$omit,
  'lodash/fp/omitAll': (pkg) => pkg.$omitAll,
  'lodash/fp/omitBy': (pkg) => pkg.$omitBy,
  'lodash/fp/once': (pkg) => pkg.$once,
  'lodash/fp/orderBy': (pkg) => pkg.$orderBy,
  'lodash/fp/over': (pkg) => pkg.$over,
  'lodash/fp/overArgs': (pkg) => pkg.$overArgs,
  'lodash/fp/overEvery': (pkg) => pkg.$overEvery,
  'lodash/fp/overSome': (pkg) => pkg.$overSome,
  'lodash/fp/pad': (pkg) => pkg.$pad,
  'lodash/fp/padChars': (pkg) => pkg.$padChars,
  'lodash/fp/padCharsEnd': (pkg) => pkg.$padCharsEnd,
  'lodash/fp/padCharsStart': (pkg) => pkg.$padCharsStart,
  'lodash/fp/padEnd': (pkg) => pkg.$padEnd,
  'lodash/fp/padStart': (pkg) => pkg.$padStart,
  'lodash/fp/parseInt': (pkg) => pkg.$parseInt,
  'lodash/fp/partial': (pkg) => pkg.$partial,
  'lodash/fp/partialRight': (pkg) => pkg.$partialRight,
  'lodash/fp/partition': (pkg) => pkg.$partition,
  'lodash/fp/path': (pkg) => pkg.$path,
  'lodash/fp/pathEq': (pkg) => pkg.$pathEq,
  'lodash/fp/pathOr': (pkg) => pkg.$pathOr,
  'lodash/fp/paths': (pkg) => pkg.$paths,
  'lodash/fp/pick': (pkg) => pkg.$pick,
  'lodash/fp/pickAll': (pkg) => pkg.$pickAll,
  'lodash/fp/pickBy': (pkg) => pkg.$pickBy,
  'lodash/fp/pipe': (pkg) => pkg.$pipe,
  'lodash/fp/placeholder': (pkg) => pkg.$placeholder,
  'lodash/fp/plant': (pkg) => pkg.$plant,
  'lodash/fp/pluck': (pkg) => pkg.$pluck,
  'lodash/fp/prop': (pkg) => pkg.$prop,
  'lodash/fp/propEq': (pkg) => pkg.$propEq,
  'lodash/fp/property': (pkg) => pkg.$property,
  'lodash/fp/propertyOf': (pkg) => pkg.$propertyOf,
  'lodash/fp/propOr': (pkg) => pkg.$propOr,
  'lodash/fp/props': (pkg) => pkg.$props,
  'lodash/fp/pull': (pkg) => pkg.$pull,
  'lodash/fp/pullAll': (pkg) => pkg.$pullAll,
  'lodash/fp/pullAllBy': (pkg) => pkg.$pullAllBy,
  'lodash/fp/pullAllWith': (pkg) => pkg.$pullAllWith,
  'lodash/fp/pullAt': (pkg) => pkg.$pullAt,
  'lodash/fp/random': (pkg) => pkg.$random,
  'lodash/fp/range': (pkg) => pkg.$range,
  'lodash/fp/rangeRight': (pkg) => pkg.$rangeRight,
  'lodash/fp/rangeStep': (pkg) => pkg.$rangeStep,
  'lodash/fp/rangeStepRight': (pkg) => pkg.$rangeStepRight,
  'lodash/fp/rearg': (pkg) => pkg.$rearg,
  'lodash/fp/reduce': (pkg) => pkg.$reduce,
  'lodash/fp/reduceRight': (pkg) => pkg.$reduceRight,
  'lodash/fp/reject': (pkg) => pkg.$reject,
  'lodash/fp/remove': (pkg) => pkg.$remove,
  'lodash/fp/repeat': (pkg) => pkg.$repeat,
  'lodash/fp/replace': (pkg) => pkg.$replace,
  'lodash/fp/rest': (pkg) => pkg.$rest,
  'lodash/fp/restFrom': (pkg) => pkg.$restFrom,
  'lodash/fp/result': (pkg) => pkg.$result,
  'lodash/fp/reverse': (pkg) => pkg.$reverse,
  'lodash/fp/round': (pkg) => pkg.$round,
  'lodash/fp/sample': (pkg) => pkg.$sample,
  'lodash/fp/sampleSize': (pkg) => pkg.$sampleSize,
  'lodash/fp/seq': (pkg) => pkg.$seq,
  'lodash/fp/set': (pkg) => pkg.$set,
  'lodash/fp/setWith': (pkg) => pkg.$setWith,
  'lodash/fp/shuffle': (pkg) => pkg.$shuffle,
  'lodash/fp/size': (pkg) => pkg.$size,
  'lodash/fp/slice': (pkg) => pkg.$slice,
  'lodash/fp/snakeCase': (pkg) => pkg.$snakeCase,
  'lodash/fp/some': (pkg) => pkg.$some,
  'lodash/fp/sortBy': (pkg) => pkg.$sortBy,
  'lodash/fp/sortedIndex': (pkg) => pkg.$sortedIndex,
  'lodash/fp/sortedIndexBy': (pkg) => pkg.$sortedIndexBy,
  'lodash/fp/sortedIndexOf': (pkg) => pkg.$sortedIndexOf,
  'lodash/fp/sortedLastIndex': (pkg) => pkg.$sortedLastIndex,
  'lodash/fp/sortedLastIndexBy': (pkg) => pkg.$sortedLastIndexBy,
  'lodash/fp/sortedLastIndexOf': (pkg) => pkg.$sortedLastIndexOf,
  'lodash/fp/sortedUniq': (pkg) => pkg.$sortedUniq,
  'lodash/fp/sortedUniqBy': (pkg) => pkg.$sortedUniqBy,
  'lodash/fp/split': (pkg) => pkg.$split,
  'lodash/fp/spread': (pkg) => pkg.$spread,
  'lodash/fp/spreadFrom': (pkg) => pkg.$spreadFrom,
  'lodash/fp/startCase': (pkg) => pkg.$startCase,
  'lodash/fp/startsWith': (pkg) => pkg.$startsWith,
  'lodash/fp/string': (pkg) => pkg.$string,
  'lodash/fp/stubArray': (pkg) => pkg.$stubArray,
  'lodash/fp/stubFalse': (pkg) => pkg.$stubFalse,
  'lodash/fp/stubObject': (pkg) => pkg.$stubObject,
  'lodash/fp/stubString': (pkg) => pkg.$stubString,
  'lodash/fp/stubTrue': (pkg) => pkg.$stubTrue,
  'lodash/fp/subtract': (pkg) => pkg.$subtract,
  'lodash/fp/sum': (pkg) => pkg.$sum,
  'lodash/fp/sumBy': (pkg) => pkg.$sumBy,
  'lodash/fp/symmetricDifference': (pkg) => pkg.$symmetricDifference,
  'lodash/fp/symmetricDifferenceBy': (pkg) => pkg.$symmetricDifferenceBy,
  'lodash/fp/symmetricDifferenceWith': (pkg) => pkg.$symmetricDifferenceWith,
  'lodash/fp/T': (pkg) => pkg.$T,
  'lodash/fp/tail': (pkg) => pkg.$tail,
  'lodash/fp/take': (pkg) => pkg.$take,
  'lodash/fp/takeLast': (pkg) => pkg.$takeLast,
  'lodash/fp/takeLastWhile': (pkg) => pkg.$takeLastWhile,
  'lodash/fp/takeRight': (pkg) => pkg.$takeRight,
  'lodash/fp/takeRightWhile': (pkg) => pkg.$takeRightWhile,
  'lodash/fp/takeWhile': (pkg) => pkg.$takeWhile,
  'lodash/fp/tap': (pkg) => pkg.$tap,
  'lodash/fp/template': (pkg) => pkg.$template,
  'lodash/fp/templateSettings': (pkg) => pkg.$templateSettings,
  'lodash/fp/throttle': (pkg) => pkg.$throttle,
  'lodash/fp/thru': (pkg) => pkg.$thru,
  'lodash/fp/times': (pkg) => pkg.$times,
  'lodash/fp/toArray': (pkg) => pkg.$toArray,
  'lodash/fp/toFinite': (pkg) => pkg.$toFinite,
  'lodash/fp/toInteger': (pkg) => pkg.$toInteger,
  'lodash/fp/toIterator': (pkg) => pkg.$toIterator,
  'lodash/fp/toJSON': (pkg) => pkg.$toJSON,
  'lodash/fp/toLength': (pkg) => pkg.$toLength,
  'lodash/fp/toLower': (pkg) => pkg.$toLower,
  'lodash/fp/toNumber': (pkg) => pkg.$toNumber,
  'lodash/fp/toPairs': (pkg) => pkg.$toPairs,
  'lodash/fp/toPairsIn': (pkg) => pkg.$toPairsIn,
  'lodash/fp/toPath': (pkg) => pkg.$toPath,
  'lodash/fp/toPlainObject': (pkg) => pkg.$toPlainObject,
  'lodash/fp/toSafeInteger': (pkg) => pkg.$toSafeInteger,
  'lodash/fp/toString': (pkg) => pkg.$toString,
  'lodash/fp/toUpper': (pkg) => pkg.$toUpper,
  'lodash/fp/transform': (pkg) => pkg.$transform,
  'lodash/fp/trim': (pkg) => pkg.$trim,
  'lodash/fp/trimChars': (pkg) => pkg.$trimChars,
  'lodash/fp/trimCharsEnd': (pkg) => pkg.$trimCharsEnd,
  'lodash/fp/trimCharsStart': (pkg) => pkg.$trimCharsStart,
  'lodash/fp/trimEnd': (pkg) => pkg.$trimEnd,
  'lodash/fp/trimStart': (pkg) => pkg.$trimStart,
  'lodash/fp/truncate': (pkg) => pkg.$truncate,
  'lodash/fp/unapply': (pkg) => pkg.$unapply,
  'lodash/fp/unary': (pkg) => pkg.$unary,
  'lodash/fp/unescape': (pkg) => pkg.$unescape,
  'lodash/fp/union': (pkg) => pkg.$union,
  'lodash/fp/unionBy': (pkg) => pkg.$unionBy,
  'lodash/fp/unionWith': (pkg) => pkg.$unionWith,
  'lodash/fp/uniq': (pkg) => pkg.$uniq,
  'lodash/fp/uniqBy': (pkg) => pkg.$uniqBy,
  'lodash/fp/uniqueId': (pkg) => pkg.$uniqueId,
  'lodash/fp/uniqWith': (pkg) => pkg.$uniqWith,
  'lodash/fp/unnest': (pkg) => pkg.$unnest,
  'lodash/fp/unset': (pkg) => pkg.$unset,
  'lodash/fp/unzip': (pkg) => pkg.$unzip,
  'lodash/fp/unzipWith': (pkg) => pkg.$unzipWith,
  'lodash/fp/update': (pkg) => pkg.$update,
  'lodash/fp/updateWith': (pkg) => pkg.$updateWith,
  'lodash/fp/upperCase': (pkg) => pkg.$upperCase,
  'lodash/fp/upperFirst': (pkg) => pkg.$upperFirst,
  'lodash/fp/useWith': (pkg) => pkg.$useWith,
  'lodash/fp/util': (pkg) => pkg.$util,
  'lodash/fp/value': (pkg) => pkg.$value,
  'lodash/fp/valueOf': (pkg) => pkg.$valueOf,
  'lodash/fp/values': (pkg) => pkg.$values,
  'lodash/fp/valuesIn': (pkg) => pkg.$valuesIn,
  'lodash/fp/where': (pkg) => pkg.$where,
  'lodash/fp/whereEq': (pkg) => pkg.$whereEq,
  'lodash/fp/without': (pkg) => pkg.$without,
  'lodash/fp/words': (pkg) => pkg.$words,
  'lodash/fp/wrap': (pkg) => pkg.$wrap,
  'lodash/fp/wrapperAt': (pkg) => pkg.$wrapperAt,
  'lodash/fp/wrapperChain': (pkg) => pkg.$wrapperChain,
  'lodash/fp/wrapperLodash': (pkg) => pkg.$wrapperLodash,
  'lodash/fp/wrapperReverse': (pkg) => pkg.$wrapperReverse,
  'lodash/fp/wrapperValue': (pkg) => pkg.$wrapperValue,
  'lodash/fp/xor': (pkg) => pkg.$xor,
  'lodash/fp/xorBy': (pkg) => pkg.$xorBy,
  'lodash/fp/xorWith': (pkg) => pkg.$xorWith,
  'lodash/fp/zip': (pkg) => pkg.$zip,
  'lodash/fp/zipAll': (pkg) => pkg.$zipAll,
  'lodash/fp/zipObj': (pkg) => pkg.$zipObj,
  'lodash/fp/zipObject': (pkg) => pkg.$zipObject,
  'lodash/fp/zipObjectDeep': (pkg) => pkg.$zipObjectDeep,
  'lodash/fp/zipWith': (pkg) => pkg.$zipWith,
  'lodash/fp/_baseConvert': (pkg) => pkg.$_baseConvert,
  'lodash/fp/_convertBrowser': (pkg) => pkg.$_convertBrowser,
  'lodash/fp/_falseOptions': (pkg) => pkg.$_falseOptions,
  'lodash/fp/_mapping': (pkg) => pkg.$_mapping,
  'lodash/fp/_util': (pkg) => pkg.$_util,
});
